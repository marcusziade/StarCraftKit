name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Triggers on version tags like 2.0.0

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact-name: StarCraftKit-macOS
            build-args: "-c release --arch arm64 --arch x86_64"
          - os: ubuntu-latest
            artifact-name: StarCraftKit-Linux
            build-args: "-c release --static-swift-stdlib"
          - os: windows-latest
            artifact-name: StarCraftKit-Windows
            build-args: "-c release"
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "5.9"
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
      
      - name: Build release binary
        run: |
          echo "::group::Build Configuration"
          echo "OS: ${{ runner.os }}"
          echo "Build args: ${{ matrix.build-args }}"
          echo "Swift version:"
          swift --version
          echo "::endgroup::"
          
          echo "::group::Build Output"
          swift build ${{ matrix.build-args }} --verbose
          echo "::endgroup::"
      
      - name: List build artifacts
        run: |
          echo "::group::Build Directory Contents"
          if [ "${{ runner.os }}" == "Windows" ]; then
            dir .build\release
          else
            ls -la .build/release/
          fi
          echo "::endgroup::"
      
      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "::group::Packaging for ${{ matrix.artifact-name }}"
          mkdir -p dist
          echo "Copying binary from .build/release/starcraft-kit to dist/"
          cp .build/release/starcraft-kit dist/
          echo "Creating archive: ${{ matrix.artifact-name }}-${{ github.ref_name }}.tar.gz"
          tar -czf ${{ matrix.artifact-name }}-${{ github.ref_name }}.tar.gz -C dist .
          echo "Archive created. Size:"
          ls -lh *.tar.gz
          echo "::endgroup::"
      
      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "::group::Packaging for ${{ matrix.artifact-name }}"
          Write-Host "Creating dist directory"
          New-Item -ItemType Directory -Force -Path dist
          Write-Host "Copying binary from .build\release\starcraft-kit.exe to dist\"
          Copy-Item .build\release\starcraft-kit.exe dist\
          Write-Host "Creating archive: ${{ matrix.artifact-name }}-${{ github.ref_name }}.zip"
          Compress-Archive -Path dist\* -DestinationPath "${{ matrix.artifact-name }}-${{ github.ref_name }}.zip"
          Write-Host "Archive created. Size:"
          Get-ChildItem *.zip | Format-Table Name, Length
          Write-Host "::endgroup::"
      
      - name: Generate checksums (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "::group::Generating checksums"
          shasum -a 256 *.tar.gz > ${{ matrix.artifact-name }}-${{ github.ref_name }}.sha256
          echo "Checksum file contents:"
          cat ${{ matrix.artifact-name }}-${{ github.ref_name }}.sha256
          echo "::endgroup::"
      
      - name: Generate checksums (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "::group::Generating checksums"
          $hash = Get-FileHash -Algorithm SHA256 *.zip
          "$($hash.Hash.ToLower())  $($hash.Path.Split('\')[-1])" | Out-File -FilePath "${{ matrix.artifact-name }}-${{ github.ref_name }}.sha256"
          Write-Host "Checksum file contents:"
          Get-Content "${{ matrix.artifact-name }}-${{ github.ref_name }}.sha256"
          Write-Host "::endgroup::"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            *.tar.gz
            *.zip
            *.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded artifacts structure"
          find artifacts -type f -name "*" | sort
          echo "::endgroup::"
          
          echo "::group::File sizes"
          find artifacts -type f -exec ls -lh {} \;
          echo "::endgroup::"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256