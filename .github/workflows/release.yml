name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.0)'
        required: true
        default: '2.0.0'

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "5.9"
      - run: swift build -c release --product starcraft-cli
      - run: |
          mkdir -p dist
          cp .build/release/starcraft-cli dist/
          tar -czf starcraft-cli-macos.tar.gz -C dist .
      - uses: actions/upload-artifact@v4
        with:
          name: starcraft-cli-macos
          path: starcraft-cli-macos.tar.gz

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace swift:5.9 \
            swift build -c release --static-swift-stdlib --product starcraft-cli
          mkdir -p dist
          cp .build/release/starcraft-cli dist/
          tar -czf starcraft-cli-linux.tar.gz -C dist .
      - uses: actions/upload-artifact@v4
        with:
          name: starcraft-cli-linux
          path: starcraft-cli-linux.tar.gz

  release:
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - uses: softprops/action-gh-release@v1
        id: create_release
        with:
          files: artifacts/**/*.tar.gz
          generate_release_notes: true
          token: ${{ secrets.GH_TOKEN }}
      
      # Update Homebrew formula
      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: marcusziade/homebrew-tap
          token: ${{ secrets.GH_TOKEN }}
          path: homebrew-tap
      
      - name: Calculate checksums and update formula
        run: |
          # Get version from tag or workflow input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Calculate checksums
          MACOS_SHA256=$(sha256sum artifacts/starcraft-cli-macos/starcraft-cli-macos.tar.gz | cut -d' ' -f1)
          LINUX_SHA256=$(sha256sum artifacts/starcraft-cli-linux/starcraft-cli-linux.tar.gz | cut -d' ' -f1)
          
          cd homebrew-tap
          
          # Update the formula file
          sed -i "s/version \".*\"/version \"${VERSION}\"/" Formula/starcraft-cli.rb
          sed -i "s|download/.*/starcraft-cli-macos|download/${VERSION}/starcraft-cli-macos|" Formula/starcraft-cli.rb
          sed -i "s|download/.*/starcraft-cli-linux|download/${VERSION}/starcraft-cli-linux|" Formula/starcraft-cli.rb
          
          # Update SHA256 for macOS
          sed -i "/on_macos do/,/end/ s/sha256 \".*\"/sha256 \"${MACOS_SHA256}\"/" Formula/starcraft-cli.rb
          
          # Update SHA256 for Linux (within the if block)
          sed -i "/if Hardware::CPU.intel.*is_64_bit/,/end/ s/sha256 \".*\"/sha256 \"${LINUX_SHA256}\"/" Formula/starcraft-cli.rb
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit and push
          git add Formula/starcraft-cli.rb
          git commit -m "Update starcraft-cli to ${VERSION}" || exit 0
          git push
      
      # Update AUR package
      - name: Checkout main repository for AUR templates
        uses: actions/checkout@v4
        with:
          path: main-repo
      
      - name: Setup SSH for AUR
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur_key
          chmod 600 ~/.ssh/aur_key
          ssh-keyscan -t ed25519 aur.archlinux.org >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts
          
          # Test SSH connection
          ssh -i ~/.ssh/aur_key -o StrictHostKeyChecking=no aur@aur.archlinux.org help || echo "SSH test completed"
      
      - name: Update AUR package
        run: |
          # Get version from tag or workflow input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          LINUX_SHA256=$(sha256sum artifacts/starcraft-cli-linux/starcraft-cli-linux.tar.gz | cut -d' ' -f1)
          
          # Clone AUR package or create directory
          export GIT_SSH_COMMAND="ssh -i ~/.ssh/aur_key -o StrictHostKeyChecking=no"
          if ! git clone ssh://aur@aur.archlinux.org/starcraft-cli.git aur-starcraft-cli; then
            echo "AUR package doesn't exist yet, creating local directory"
            mkdir -p aur-starcraft-cli
            cd aur-starcraft-cli
            git init
            cd ..
          fi
          
          cd aur-starcraft-cli
          
          # Copy our PKGBUILD template from main repo
          cp ../main-repo/aur/starcraft-cli/PKGBUILD .
          
          # Update PKGBUILD with new version and checksum
          sed -i "s/pkgver=.*/pkgver=${VERSION}/" PKGBUILD
          sed -i "s/sha256sums=.*/sha256sums=('${LINUX_SHA256}')/" PKGBUILD
          
          # Generate .SRCINFO
          if ! command -v makepkg &> /dev/null; then
            echo "makepkg not found, creating .SRCINFO manually"
            cat > .SRCINFO << 'SRCINFO'
          pkgbase = starcraft-cli
          	pkgdesc = Command-line tool for tracking StarCraft 2 esports
          	pkgver = VERSION_PLACEHOLDER
          	pkgrel = 1
          	url = https://github.com/marcusziade/StarCraftKit
          	arch = x86_64
          	license = MIT
          	depends = glibc
          	source = starcraft-cli-VERSION_PLACEHOLDER.tar.gz::https://github.com/marcusziade/StarCraftKit/releases/download/VERSION_PLACEHOLDER/starcraft-cli-linux.tar.gz
          	sha256sums = SHA256_PLACEHOLDER
          
          pkgname = starcraft-cli
          SRCINFO
            sed -i "s/VERSION_PLACEHOLDER/${VERSION}/g" .SRCINFO
            sed -i "s/SHA256_PLACEHOLDER/${LINUX_SHA256}/g" .SRCINFO
          else
            makepkg --printsrcinfo > .SRCINFO
          fi
          
          # Configure git
          git config user.name "Marcus Ziade"
          git config user.email "marcusziade@me.com"
          
          # Commit and push
          git add PKGBUILD .SRCINFO
          git commit -m "Update to ${VERSION}" || echo "No changes to commit"
          
          # Push to AUR if we have the SSH key
          if [ -f ~/.ssh/aur_key ]; then
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/aur_key -o StrictHostKeyChecking=no"
            
            # For initial creation, we need to push to a new repository
            if [ ! -d .git ]; then
              echo "Error: Not in a git repository"
              exit 1
            fi
            
            # Check if this is a fresh repo (no remotes)
            if ! git remote | grep -q .; then
              echo "Fresh repository detected, setting up AUR remote"
              git remote add origin ssh://aur@aur.archlinux.org/starcraft-cli.git
              git push -u origin master || {
                echo "❌ Failed to push to AUR. The package may not exist yet."
                echo "To create it, run: ssh aur@aur.archlinux.org setup-repo starcraft-cli"
                exit 0
              }
            else
              # Existing repo, just push
              git push origin master || echo "Push failed, but continuing"
            fi
            
            echo "✅ AUR package update completed"
            echo "Package will be available at: https://aur.archlinux.org/packages/starcraft-cli"
          else
            echo "❌ SSH key not found, skipping AUR update"
          fi