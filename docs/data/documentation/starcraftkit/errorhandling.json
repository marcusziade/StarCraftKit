{"metadata":{"roleHeading":"Article","modules":[{"name":"StarCraftKit"}],"role":"article","title":"Error Handling"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/ErrorHandling"},"abstract":[{"text":"Learn how to handle errors effectively when using StarCraftKit.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/StarCraftKit\/documentation\/StarCraftKit"]]},"seeAlsoSections":[{"generated":true,"title":"Essential Concepts","anchor":"Essential-Concepts","identifiers":["doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/StarCraftClient","doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/APIError"]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"StarCraftKit uses Swift’s error handling mechanism with detailed error types to help you build robust applications. All API methods are marked with ","type":"text"},{"code":"throws","type":"codeVoice"},{"text":" and use async\/await.","type":"text"}],"type":"paragraph"},{"text":"Error Types","level":2,"type":"heading","anchor":"Error-Types"},{"inlineContent":[{"type":"text","text":"StarCraftKit defines "},{"identifier":"doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/APIError","type":"reference","isActive":true},{"type":"text","text":" as the primary error type with specific cases for different failure scenarios:"}],"type":"paragraph"},{"text":"Authentication Errors","level":3,"type":"heading","anchor":"Authentication-Errors"},{"syntax":"swift","type":"codeListing","code":["do {","    let matches = try await client.getMatches()","} catch APIError.unauthorized(let message) {","    print(\"Authentication failed: \\(message)\")","    \/\/ Prompt user to check API token","} catch APIError.forbidden(let message) {","    print(\"Access denied: \\(message)\")","    \/\/ User's plan may not include this endpoint","}"]},{"text":"Network Errors","level":3,"type":"heading","anchor":"Network-Errors"},{"syntax":"swift","type":"codeListing","code":["do {","    let players = try await client.getPlayers()","} catch APIError.networkError(let underlying) {","    print(\"Network issue: \\(underlying)\")","    \/\/ Check internet connection","} catch APIError.timeout {","    print(\"Request timed out\")","    \/\/ Retry with longer timeout","}"]},{"text":"Rate Limiting","level":3,"type":"heading","anchor":"Rate-Limiting"},{"syntax":"swift","type":"codeListing","code":["do {","    let tournaments = try await client.getTournaments()","} catch APIError.rateLimitExceeded(let retryAfter, let remaining) {","    if let retryAfter = retryAfter {","        print(\"Rate limited. Retry after \\(retryAfter) seconds\")","        \/\/ Schedule retry after the specified time","    }","    print(\"Remaining requests: \\(remaining ?? 0)\")","}"]},{"text":"Data Errors","level":3,"type":"heading","anchor":"Data-Errors"},{"syntax":"swift","type":"codeListing","code":["do {","    let match = try await client.getMatch(id: 99999)","} catch APIError.notFound(let resource) {","    print(\"Not found: \\(resource)\")","    \/\/ Handle missing resource","} catch APIError.decodingError(let error, let data) {","    print(\"Failed to decode response: \\(error)\")","    \/\/ Log the raw data for debugging","}"]},{"text":"Comprehensive Error Handling","level":2,"type":"heading","anchor":"Comprehensive-Error-Handling"},{"inlineContent":[{"type":"text","text":"Here’s a complete example showing how to handle all error types:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func fetchMatchSafely(id: Int) async {","    do {","        let match = try await client.getMatch(id: id)","        print(\"Match: \\(match.name)\")","    } catch {","        switch error {","        case APIError.unauthorized:","            handleAuthenticationError()","            ","        case APIError.rateLimitExceeded(let retryAfter, _):","            await handleRateLimit(retryAfter: retryAfter)","            ","        case APIError.notFound:","            print(\"Match \\(id) not found\")","            ","        case APIError.networkError:","            print(\"Network error - check connection\")","            ","        case APIError.serverError(let code, let message):","            print(\"Server error \\(code): \\(message ?? \"Unknown\")\")","            ","        case APIError.decodingError:","            print(\"Invalid response format\")","            ","        default:","            print(\"Unexpected error: \\(error)\")","        }","    }","}"]},{"text":"Retry Strategies","level":2,"type":"heading","anchor":"Retry-Strategies"},{"text":"Automatic Retries","level":3,"type":"heading","anchor":"Automatic-Retries"},{"inlineContent":[{"type":"text","text":"StarCraftKit automatically retries certain errors. You can configure this behavior:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let config = StarCraftClient.Configuration(","    apiKey: \"your-token\",","    retryConfiguration: .aggressive \/\/ More retries",")","let client = StarCraftClient(configuration: config)"]},{"text":"Manual Retry Logic","level":3,"type":"heading","anchor":"Manual-Retry-Logic"},{"syntax":"swift","type":"codeListing","code":["func fetchWithRetry<T>(_ operation: () async throws -> T, ","                      maxAttempts: Int = 3) async throws -> T {","    var lastError: Error?","    ","    for attempt in 1...maxAttempts {","        do {","            return try await operation()","        } catch APIError.rateLimitExceeded(let retryAfter, _) {","            \/\/ Wait for rate limit reset","            if let retryAfter = retryAfter {","                try await Task.sleep(nanoseconds: UInt64(retryAfter * 1_000_000_000))","            }","            lastError = error","        } catch APIError.serverError {","            \/\/ Exponential backoff for server errors","            let delay = Double(attempt) * 2.0","            try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","            lastError = error","        } catch {","            \/\/ Don't retry other errors","            throw error","        }","    }","    ","    throw lastError ?? APIError.invalidRequest(reason: \"Max retries exceeded\")","}","","\/\/ Usage","let matches = try await fetchWithRetry {","    try await client.getLiveMatches()","}"]},{"text":"Error Recovery","level":2,"type":"heading","anchor":"Error-Recovery"},{"text":"Fallback Strategies","level":3,"type":"heading","anchor":"Fallback-Strategies"},{"syntax":"swift","type":"codeListing","code":["func getMatchesWithFallback() async -> [Match] {","    do {","        \/\/ Try to get live matches","        return try await client.getLiveMatches()","    } catch {","        \/\/ Fall back to cached data","        return loadCachedMatches() ?? []","    }","}"]},{"text":"User-Friendly Error Messages","level":3,"type":"heading","anchor":"User-Friendly-Error-Messages"},{"syntax":"swift","type":"codeListing","code":["extension APIError {","    var userFriendlyMessage: String {","        switch self {","        case .unauthorized:","            return \"Please check your API credentials\"","        case .rateLimitExceeded:","            return \"Too many requests. Please wait a moment.\"","        case .networkError:","            return \"Connection error. Check your internet.\"","        case .notFound:","            return \"Content not found\"","        case .serverError:","            return \"Server issue. Please try again later.\"","        default:","            return \"Something went wrong\"","        }","    }","}"]},{"text":"Debugging","level":2,"type":"heading","anchor":"Debugging"},{"text":"Detailed Error Logging","level":3,"type":"heading","anchor":"Detailed-Error-Logging"},{"syntax":"swift","type":"codeListing","code":["func logError(_ error: Error, context: String) {","    print(\"[\\(Date())] Error in \\(context):\")","    ","    if let apiError = error as? APIError {","        switch apiError {","        case .httpError(let code, let response):","            print(\"  HTTP \\(code)\")","            print(\"  Response: \\(response?.message ?? \"None\")\")","            ","        case .decodingError(let underlying, let data):","            print(\"  Decoding failed: \\(underlying)\")","            if let data = data, let json = String(data: data, encoding: .utf8) {","                print(\"  Raw response: \\(json)\")","            }","            ","        default:","            print(\"  \\(apiError.localizedDescription)\")","        }","    } else {","        print(\"  \\(error)\")","    }","}"]},{"text":"Best Practices","level":2,"type":"heading","anchor":"Best-Practices"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Always handle errors"}]},{"type":"text","text":" - Don’t ignore thrown errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Be specific"}]},{"type":"text","text":" - Handle different error types appropriately"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Provide feedback"}],"type":"strong"},{"text":" - Inform users about issues","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Log errors","type":"text"}],"type":"strong"},{"text":" - Keep track of issues for debugging","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Implement retries","type":"text"}]},{"type":"text","text":" - For transient failures"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Have fallbacks","type":"text"}]},{"type":"text","text":" - Graceful degradation when possible"}]}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/starcraftkit\/errorhandling"]}],"references":{"doc://StarCraftKit/documentation/StarCraftKit":{"abstract":[{"type":"text","text":"A modern Swift SDK for accessing StarCraft II esports data through the PandaScore API."}],"role":"collection","type":"topic","url":"\/documentation\/starcraftkit","title":"StarCraftKit","identifier":"doc:\/\/StarCraftKit\/documentation\/StarCraftKit","kind":"symbol"},"doc://StarCraftKit/documentation/StarCraftKit/StarCraftClient":{"identifier":"doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/StarCraftClient","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"StarCraftClient"}],"navigatorTitle":[{"kind":"identifier","text":"StarCraftClient"}],"url":"\/documentation\/starcraftkit\/starcraftclient","title":"StarCraftClient","abstract":[{"type":"text","text":"The main client for interacting with the PandaScore StarCraft II API."}],"kind":"symbol"},"doc://StarCraftKit/documentation/StarCraftKit/APIError":{"identifier":"doc:\/\/StarCraftKit\/documentation\/StarCraftKit\/APIError","type":"topic","kind":"symbol","url":"\/documentation\/starcraftkit\/apierror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIError","kind":"identifier"}],"navigatorTitle":[{"text":"APIError","kind":"identifier"}],"title":"APIError","abstract":[{"text":"Comprehensive error types for StarCraftKit API operations.","type":"text"}],"role":"symbol"}}}